// https://swr.vercel.app/
import axios from "axios";

/**
 * This Code block was 100% Generated by Google Pro Gemini
 * An asynchronous function designed to fetch data from a given URL using Axios.
 * This fetcher is compatible with SWR (stale-while-revalidate) and handles errors
 * by throwing an error object, which SWR can then use to manage error states.
 *
 * @template T - The expected type of the data to be fetched. Defaults to `unknown`.
 * @param {string} url - The URL from which to fetch data.
 * @returns {Promise<T>} A promise that resolves with the fetched data of type `T`.
 * @throws {Error} Throws an error if the request fails.
 *                 If it's an Axios error with a response, a more informative error message
 *                 is created using `error.response.data?.message`, `error.message`, or a default message.
 *                 Otherwise, the original error is re-thrown.
 */
export const swrFetcher = async <T = unknown>(url: string): Promise<T> => {
	try {
		const response = await axios.get<T>(url);
		return response.data;
	} catch (error) {
		// Let SWR know that an error occurred by throwing an error.
		if (axios.isAxiosError(error) && error.response) {
			// Create a more informative error message from the API's response.
			throw new Error(
				error.response.data?.message ||
					error.message ||
					"An error occurred while fetching data.",
			);
		}
		// Re-throw other types of errors.
		throw error;
	}
};

import axios, { type AxiosError } from "axios";
import type { apiResponseProp } from "@/app/api/types"; // Importing necessary types. `apiResponseProp` helps standardize how API responses are handled in the frontend.

/**
 * Entire Code-Block was 100% Generated by Google Pro Gemini
 * Posts data to a specified API endpoint using `axios.post` and returns a standardized response object.
 * It handles both successful responses and errors, including Axios-specific errors and generic JavaScript errors.
 *
 * @template TRequest - The type of the data object being sent in the request body.
 *   // Student Note: Generics <TRequest, TResponse> make this function reusable for different kinds of POST requests
 *   // and their expected responses. TRequest defines the shape of the data you're sending.
 * @template TResponse - The expected type of the data in the `data` field of a successful API response.
 *   // Student Note: TResponse defines the shape of the data you expect back from the server if the request is successful.
 *
 * @param {string} url - The URL of the API endpoint to which the POST request will be made.
 *   // Student Note: This is the specific address on the server you're sending data to.
 * @param {TRequest} data - The data to be sent as the request body.
 *   // Student Note: This is the actual information (e.g., form data) you're sending, matching the TRequest type.
 *
 * @returns {Promise<apiResponseProp<TResponse>>} A promise that resolves to an `apiResponseProp` object.
 *   // Student Note: This function is asynchronous (hence `async` and `Promise`). The `apiResponseProp` provides a consistent
 *   // structure for handling the outcome of the API call in your UI components.
 * This object encapsulates the result of the API call:
 * - `success` (boolean): `true` if the request was successful, `false` otherwise.
 * - `isLoading` (boolean): Always `false` in the object returned by this function, as it resolves after the request is complete.
 *   // Student Note: The component calling this function would typically manage an `isLoading` state that is true *while*
 *   // this `postToApi` function is executing (i.e., while waiting for the `await axios.post`).
 * - `error` (object | null): If the request failed, this will be an object with:
 *    - `name` (string): Always "ApiError".
 *    - `message` (string): A description of the error.
 *    - `details` (unknown): Additional details about the error, often the response data from the server in case of an HTTP error.
 *    If the request was successful, `error` will be `null`.
 *   // Student Note: Standardizing the error object helps in displaying consistent error messages to the user.
 * - `data` (TResponse | null): If the request was successful, this contains the response data. Otherwise, it's `null`.
 * - `message` (string): A human-readable message indicating the outcome (e.g., "Successfully submitted." or an error message).
 */
export async function postToApi<TRequest, TResponse>(
	url: string,
	data: TRequest,
): Promise<apiResponseProp<TResponse>> {
	// Student Note: The `try...catch` block is crucial for handling potential errors during the API call.
	try {
		// Student Note: `axios.post` sends an HTTP POST request. The first argument is the URL, the second is the data.
		// We `await` its completion because it returns a Promise.
		const response = await axios.post<TResponse>(url, data);
		// Student Note: If the request is successful (doesn't throw an error), we construct a success response object.
		return {
			success: true,
			isLoading: false, // The operation is now complete.
			error: null, // No error occurred.
			data: response.data, // The data returned by the server.
			message: "Successfully submitted.", // A generic success message.
		};
	} catch (error) {
		// Student Note: If `axios.post` throws an error (e.g., network issue, server error like 4xx or 5xx), this block executes.
		let errorMessage = "An error occurred during the request."; // Default error message.
		let errorDetails: unknown = null; // To store more specific error details if available.

		// Student Note: `axios.isAxiosError(error)` checks if the error is specifically from Axios.
		// This allows access to more detailed error information like `error.response`.
		if (axios.isAxiosError(error)) {
			// Student Note: Casting to `AxiosError<{ message?: string }>` helps TypeScript understand the structure of `error.response.data`.
			// It assumes the server might return an error object with a `message` property.
			const axiosError = error as AxiosError<{ message?: string }>;
			errorMessage =
				axiosError.response?.data?.message || // Try to get a message from the server's response body.
				axiosError.message || // Fallback to Axios's own error message.
				errorMessage; // Fallback to the default.
			errorDetails = axiosError.response?.data; // Store the whole response data as details.
		} else if (error instanceof Error) {
			// Student Note: If it's not an Axios error but a generic JavaScript Error, use its message.
			errorMessage = error.message;
		}

		// Student Note: Construct a standardized error response object.
		return {
			success: false,
			isLoading: false, // The operation is now complete, albeit with an error.
			error: {
				// Provide a structured error object.
				name: "ApiError", // A custom name for this type of error.
				message: errorMessage,
				details: errorDetails,
			} as never, // Student Note: `as never` is used here to satisfy the `error: null` part of `apiResponseProp` for the success case.
			// A more precise error type could be defined for `apiResponseProp.error` to avoid `as never`.
			message: errorMessage, // The determined error message.
			data: null, // No data is available due to the error.
		};
	}
}
